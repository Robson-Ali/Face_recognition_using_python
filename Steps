import cv2
import dlib
import numpy as np

# Load the pre-trained face detection model
face_detector = dlib.get_frontal_face_detector()

# Load the pre-trained face landmark detection model
landmark_predictor = dlib.shape_predictor('shape_predictor_68_face_landmarks.dat')

# Load the pre-trained face recognition model
face_recognizer = dlib.face_recognition_model_v1('dlib_face_recognition_resnet_model_v1.dat')

# Load a sample image and extract its features
sample_image = cv2.imread('sample_image.jpg')
sample_gray = cv2.cvtColor(sample_image, cv2.COLOR_BGR2GRAY)
sample_faces = face_detector(sample_gray)
sample_landmarks = [landmark_predictor(sample_gray, face) for face in sample_faces]
sample_features = [face_recognizer.compute_face_descriptor(sample_gray, landmark) for landmark in sample_landmarks]

# Initialize the video capture
video_capture = cv2.VideoCapture(0)

while True:
    # Read a frame from the video stream
    ret, frame = video_capture.read()

    # Convert the frame to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the frame
    faces = face_detector(gray)

    # Iterate over the detected faces
    for face in faces:
        # Determine the facial landmarks
        landmarks = landmark_predictor(gray, face)

        # Extract the face features
        features = face_recognizer.compute_face_descriptor(gray, landmarks)

        # Compare the features with the sample image features
        distances = np.linalg.norm(np.array(sample_features) - np.array(features), axis=1)
        min_distance = np.min(distances)

        # Set a threshold to determine if the face belongs to the known person or is an unknown face
        if min_distance < 0.6:
            # Recognized face
            name = "Known Person"
        else:
            # Unknown face
            name = "Unknown"

        # Draw a rectangle around the face and display the name
        (x, y, w, h) = (face.left(), face.top(), face.width(), face.height())
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
        cv2.putText(frame, name, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)

    # Display the resulting frame
    cv2.imshow('Face Recognition', frame)

    # Exit the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture and close the windows
video_capture.release()
cv2.destroyAllWindows()
